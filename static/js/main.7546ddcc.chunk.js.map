{"version":3,"sources":["web3.js","App.js","index.js"],"names":["Web3","provider","ethers","providers","Web3Provider","window","ethereum","on","_","oldNetwork","location","reload","signer","getSigner","Promise","resolve","reject","request","method","then","accounts","length","catch","err","getAddress","addr","address","abi","Contract","privateKey","Wallet","App","props","web3","initWeb3","state","account","wallet","spinner","this","getUserAccount","setState","console","log","metamaskLogin","tx","to","value","utils","parseEther","sendTransaction","e","target","getWallet","alert","className","Button","variant","onClick","bind","Stack","gap","Row","type","placeholder","onChange","onPrivateKeyChange","onSetPrivateKeyClick","Spinner","animation","role","getEth","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7546ddcc.chunk.js","sourcesContent":["\r\n\r\nimport { ethers } from 'ethers'\r\n\r\nexport default class Web3{\r\n\r\n    initWeb3(){\r\n        //get provider and signer\r\n        const provider = new ethers.providers.Web3Provider(window.ethereum)\r\n        provider.on(\"network\", (_, oldNetwork) => {\r\n            if (oldNetwork) {\r\n                //reload on network change\r\n                window.location.reload();\r\n            }\r\n        });\r\n        const signer = provider ? provider.getSigner() : null;\r\n        return {provider, signer}\r\n    }\r\n\r\n    metamaskLogin(){\r\n        return new Promise((resolve,reject)=>{\r\n            //prompt user to login to metamask\r\n            if(window.ethereum){\r\n                window.ethereum.request({method:\"eth_requestAccounts\"})\r\n                .then((accounts)=>{\r\n                    if(accounts.length > 0){\r\n                        resolve(accounts[0])\r\n                    }else{\r\n                        reject(\"No accounts found from eth_requestAccounts\")\r\n                    }\r\n                })\r\n                .catch(err=>reject(err))\r\n            }\r\n        })\r\n    }\r\n\r\n    getUserAccount(signer){\r\n        return new Promise((resolve,reject)=>{\r\n            //get account from signer if they are logged in already\r\n            if(signer){\r\n                signer.getAddress()\r\n                .then(addr=>resolve(addr))\r\n                .catch(err=>reject(\"user not logged in\"))\r\n            }else{\r\n                reject(\"signer is null\")\r\n            }\r\n        })\r\n        \r\n    }\r\n\r\n    getContract(provider, address, abi){\r\n        //create contract from given address and abi\r\n        return new Promise((resolve,reject)=>{\r\n          if(provider){\r\n                try{\r\n                    const contract = new ethers.Contract(address, abi, provider)\r\n                    resolve(contract)\r\n                }catch(err){\r\n                    reject(err)\r\n                }\r\n          }else{\r\n            reject(\"web3.getContract provider not set\")\r\n          }\r\n        })\r\n    }\r\n\r\n    getWallet(privateKey, provider){\r\n        return new Promise((resolve,reject)=>{\r\n            try{\r\n                const wallet = new ethers.Wallet(privateKey, provider);\r\n                resolve(wallet)\r\n            }catch(err){\r\n                reject(err)\r\n            }\r\n        })\r\n\r\n    }\r\n\r\n}","import Button from 'react-bootstrap/Button';\nimport Stack from 'react-bootstrap/Stack';\nimport Spinner from 'react-bootstrap/Spinner'\nimport React from 'react'\nimport Web3 from './web3'\nimport {ethers} from 'ethers'\nimport { Row } from 'react-bootstrap';\n\nexport default class App extends React.Component{\n  constructor(props){\n    super(props)\n    const web3 = new Web3();\n    const {provider,signer} = web3.initWeb3();\n    this.state = {\n      web3,\n      provider,\n      signer,\n      account: null,\n      wallet: null,\n      spinner:false,\n      privateKey:null\n    }\n  }\n\n  componentDidMount(){\n    this.state.web3.getUserAccount(this.signer)\n    .then(account=>{\n      this.setState({account})\n    })\n    .catch(err=>{\n      console.log(err)\n      this.metamaskLogin()\n    })\n  }\n\n  metamaskLogin(){\n    this.state.web3.metamaskLogin()\n    .then(account=>{\n      this.setState({account})\n    })\n  }\n\n  getEth(){\n    if(this.state.wallet && this.state.account){\n      this.setState({spinner:true})\n      const tx = {\n        to: this.state.account,\n        value: ethers.utils.parseEther(\"2.0\")\n      }\n      this.state.wallet.sendTransaction(tx)\n      .then(()=>this.setState({spinner:false}))\n      .catch(()=>this.setState({spinner:false}))\n    }\n  }\n\n  onPrivateKeyChange(e){\n    this.setState({privateKey:e.target.value})\n  }\n\n  onSetPrivateKeyClick(){\n    if(this.state.privateKey && this.state.provider){\n      this.state.web3.getWallet(this.state.privateKey, this.state.provider)\n      .then(wallet=>{\n        this.setState({wallet})\n      })\n      .catch(err=>{\n        console.log(err)\n        alert(\"failed to set wallet with that private key, check console for error\")\n      })\n    }\n    \n  }\n\n  render(){\n    return(\n      <div className=\"container text-center\">\n        {\n          (!this.state.account && <Button variant=\"primary\" className=\"mx-auto col-6\" onClick={this.metamaskLogin.bind(this)}>Login</Button>) || (\n          <Stack gap={2}>\n          <h3>{this.state.account}</h3>\n          <Row>\n          <input type=\"text\" placeholder=\"Faucet Private Key\" className=\"form-control mx-auto w-50\" onChange={this.onPrivateKeyChange.bind(this)}/>\n          <Button variant=\"primary\" className=\"mx-auto col-6\" onClick={this.onSetPrivateKeyClick.bind(this)}>Set Private Key</Button>\n          </Row>\n          {this.state.wallet && \n          ((this.state.spinner && <Spinner animation=\"border\" className=\"mx-auto\" role=\"status\" />) ||\n          <Button variant=\"primary\" className=\"mx-auto col-6\" onClick={this.getEth.bind(this)}>Get Eth</Button>)\n          }\n          </Stack>\n          )}\n      </div>\n    )\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}